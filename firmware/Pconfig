#
# MCU
#
# {{{
menu "MCU"
	choice
		prompt "Target MCU"

		config ATMEGA88
			bool "Atmega88"

		config ATMEGA1284P
			bool "Atmega1284P"
	endchoice

	config MCU_CLOCK_HZ
		int "MCU clock [HZ]"
		default 8000000

	choice
		prompt "Watchdog timeout"

		config WATCHDOG_TIMEOUT_16
			bool "16ms"

		config WATCHDOG_TIMEOUT_32
			bool "32ms"

		config WATCHDOG_TIMEOUT_64
			bool "64ms"

		config WATCHDOG_TIMEOUT_125
			bool "125ms"

		config WATCHDOG_TIMEOUT_250
			bool "250ms"

		config WATCHDOG_TIMEOUT_500
			bool "500ms"

		config WATCHDOG_TIMEOUT_1000
			bool "1s"

		config WATCHDOG_TIMEOUT_2000
			bool "2s"

		config WATCHDOG_TIMEOUT_4000
			bool "4s"

		config WATCHDOG_TIMEOUT_8000
			bool "8s"
	endchoice

	config UART_EN
		bool "Enable uart"
		default n

	menu "Hidden"
		visible if 0

		config MCU
			string "MCU"
			default "atmega88"		if ATMEGA88
			default "atmega1284p"	if ATMEGA1284P
			default "unknown MCU"

		config WATCHDOG_TIMEOUT_MS
			int "Watchdog timeout [ms]"
			default 16		if WATCHDOG_TIMEOUT_16
			default 32		if WATCHDOG_TIMEOUT_32
			default 64		if WATCHDOG_TIMEOUT_64
			default 125		if WATCHDOG_TIMEOUT_125
			default 250		if WATCHDOG_TIMEOUT_250
			default 500		if WATCHDOG_TIMEOUT_500
			default 1000	if WATCHDOG_TIMEOUT_1000
			default 2000	if WATCHDOG_TIMEOUT_2000
			default 4000	if WATCHDOG_TIMEOUT_4000
			default 8000	if WATCHDOG_TIMEOUT_8000
	endmenu
endmenu
# }}}

#
# application
#
# {{{
menu "Application"
	menu "Firmware"
		config FW_STARTANIM
			bool "Startup animation"
			default y
		
		config FW_STARTANIM_LED_DELAY_MS
			int "Startup animation interval [ms]"
			default 10
			depends on: FW_STARTANIM
			help
				Delay between switching leds within the startup animation

		config FW_LED_DELAY
			int "Led delay"
			default 1
			help
				This option defines the number of watchdog timeouts to keep leds on once their
				input pin has been triggered.
	endmenu

	menu "Test"
		config TEST_PIN_DELAY
			int "Pin trigger delay [ms]"
			default 500
			help
				Delay between switching the output pins
	endmenu
endmenu
# }}}

#
# build system
#
# {{{
menu "Build system"
	# build type
	choice
		prompt "Build type"

		config BUILD_DEBUG
			bool "debug"

		config BUILD_RELEASE
			bool "release"
	endchoice

	menu "Hidden"
		visible if 0

		config BUILD_TYPE
			string "Build type"
			default "debug" if BUILD_DEBUG
			default "release" if BUILD_RELEASE
	endmenu

	# programmer
	menu "Programmer"
		config FUSER
			string "Fuser"
			default "avrfuser"

		config PROG
			string "Programmer"
			default "avrdude"

		config DEBUGGER
			string "Debugger"
			default "avarice"

		choice
			prompt "Programmer type"

			config DRAGON_JTAG
				bool "AVR Dragon JTAG"
				depends on ATMEGA1284P

			config DRAGON_ISP
				bool "AVR Dragon ISP"

			config STK500V2
				bool "STK500v2"
		endchoice

		choice
			prompt "Programmer port"

			config PROG_PORT_USB
				bool "usb"

			config PROG_PORT_UART
				bool "uart"
		endchoice

		config PROG_UART_DEV
			string "Uart device"
			default "/dev/ttyUSB0"
			depends on PROG_PORT_UART

		menu "Hidden"
			visible if 0

			config PROG_PORT
				string "Programmer port"
				default "usb" if PROG_PORT_USB
				default PROG_UART_DEV if PROG_PORT_UART
				default "unknown programmer port"

			config PROG_DEBUG_ARGS
				string "Programmer debug arguments"
				default "--debugwire" if DRAGON_ISP || STK500V2
				default "--dragon --jtag $(CONFIG_PROG_PORT) --jtag-bitrate $(shell echo '$(CONFIG_SYSTEM_CLOCK_HZ) / (4 * 1000)' | bc -q)kHz" if DRAGON_JTAG
				default ""

			config PROG_TYPE
				string "Programmer"
				default "dragon_jtag"	if DRAGON_JTAG
				default "dragon_isp"	if DRAGON_ISP
				default "stk500v2"		if STK500V2
				default "unkown programmer"
		endmenu
	endmenu

	# build tree
	config BUILD_TREE
		string "build tree"
		default "build/$(CONFIG_MCU)/$(CONFIG_BUILD_TYPE)"

	# toolchain prefixes
	menu "Hidden"
		visible if 0

		config CC
			string CC
			default "avr-gcc"

		config CXX
			string CXX
			default "avr-g++"

		config AS
			string AS
			default "avr-as"

		config AR
			string AR
			default "avr-ar"

		config LD
			string LD
			default "avr-ld"
	endmenu

	menu "Hidden"
		visible if 0

		config HOSTCC
			string HOSTCC
			default "gcc"

		config HOSTCXX
			string HOSTCXX
			default "g++"

		config HOSTAS
			string HOSTAS
			default "as"

		config HOSTAR
			string HOSTAR
			default "ar"

		config HOSTLD
			string HOSTLD
			default "ld"
	endmenu

	# toolchain flags
	menu "Target flags"
		config CFLAGS
			string CFLAGS

		config CXXFLAGS
			string CXXFLAGS

		config CPPFLAGS
			string CPPFLAGS

		config ASFLAGS
			string ASFLAGS

		config LDFLAGS
			string LDFLAGS

		config LDLIBS
			string LDLIBS

		config ARCHFLAGS
			string ARCHFLAGS
	endmenu

	menu "Host flags"
		config HOSTCFLAGS
			string HOSTCFLAGS

		config HOSTCXXFLAGS
			string HOSTCXXFLAGS

		config HOSTCPPFLAGS
			string HOSTCPPFLAGS

		config HOSTASFLAGS
			string HOSTASFLAGS

		config HOSTLDFLAGS
			string HOSTLDFLAGS

		config HOSTLDLIBS
			string HOSTLDLIBS

		config HOSTARCHFLAGS
			string HOSTARCHFLAGS
	endmenu
endmenu
# }}}
